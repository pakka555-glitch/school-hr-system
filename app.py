import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials

# ==========================
# ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
# ==========================
st.set_page_config(page_title="School HR System", page_icon="üè´", layout="wide")

# ==========================
# üé® ‡∏ü‡∏≠‡∏ô‡∏ï‡πå + CSS (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
# ==========================
def inject_fonts_and_css():
    st.markdown(
        """
        <style>
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Thai:wght@300;400;600;700&display=swap');
        html, body, [class*="css"] { font-family: 'Noto Sans Thai', sans-serif; }

        /* ---------- Title/Subtitle ---------- */
        .kys-h1 {
            text-align:center; color:#0B3C73;
            font-weight: 800; margin: 6px 0 8px 0;
            font-size: clamp(22px, 2.6vw, 32px);
        }
        .kys-sub {
            text-align:center; color:#4e657a; margin-bottom: 12px;
        }

        /* ---------- Grid Card ---------- */
        .kys-box{
            background:#fff; border-radius:16px; box-shadow: 0 6px 18px rgba(0,0,0,.08);
            padding: 18px 18px 12px 18px; display:block;
        }
        .kys-box h3{
            margin:0 0 8px 0; font-weight:800; color:#0B3C73;
            font-size: clamp(18px, 2.1vw, 24px);
        }
        .kys-body{    /* ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô 4 ‡∏Å‡∏≤‡∏£‡πå‡∏î */
            min-height: 92px;
        }
        .kys-box ul{ margin: 0 0 6px 18px; line-height:1.55; color:#2b3e50; }

        /* ---------- ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ---------- */
        .stButton > button {
            width: 100% !important;
            background: #0D47A1 !important;    /* ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏£‡∏° */
            color: #fff !important;
            border: none !important;
            border-radius: 10px !important;
            padding: 10px 0 !important;
            font-weight: 700 !important;
            font-size: 15px !important;
            box-shadow: 0 3px 10px rgba(0,0,0,0.12) !important;
            transition: all .18s ease !important;
        }
        .stButton > button:hover{
            background:#002171 !important;
            transform: translateY(-1px);
            box-shadow: 0 6px 16px rgba(0,0,0,.22) !important;
        }

        /* ---------- ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ---------- */
        .kys-credit{
            margin-top: 22px; text-align:center; color:#5c7080; font-size: 13.5px;
        }
        .kys-credit small{color:#7b8a97;}
        </style>
        """,
        unsafe_allow_html=True,
    )

inject_fonts_and_css()

# ==========================
# üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheets (‡∏ú‡πà‡∏≤‡∏ô st.secrets)
# ==========================
@st.cache_resource(show_spinner=False)
def get_gs_client():
    info = dict(st.secrets["gcp_service_account"])
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive.readonly",
    ]
    creds = Credentials.from_service_account_info(info, scopes=scopes)
    return gspread.authorize(creds)

@st.cache_data(ttl=60, show_spinner=False)
def load_users_df():
    """‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏à‡∏≤‡∏Å Google Sheets -> DataFrame"""
    try:
        client = get_gs_client()
        sheet_id = st.secrets["gsheets"]["users_sheet_id"]
        ws_name = st.secrets["gsheets"]["users_worksheet"]
        sh = client.open_by_key(sheet_id)
        ws = sh.worksheet(ws_name)
        data = ws.get_all_records()
        df = pd.DataFrame(data).fillna("")
        # ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå
        for col in ("teacher_id", "pin", "role", "name"):
            if col not in df.columns:
                df[col] = ""
        df["teacher_id"] = df["teacher_id"].astype(str).str.strip()
        df["pin"] = df["pin"].astype(str).str.strip()
        df["role"] = df["role"].astype(str).str.lower().str.strip()
        return df
    except Exception as e:
        st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return pd.DataFrame(columns=["teacher_id","name","email","role","pin"])

def check_login(user_id, pin, allowed_roles):
    df = load_users_df()
    r = df[df["teacher_id"] == str(user_id).strip()]
    if r.empty:    return False, None, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
    u = r.iloc[0]
    if str(u["pin"]) != str(pin).strip():
        return False, None, "üîí PIN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
    if allowed_roles and u["role"] not in allowed_roles:
        return False, None, "üö´ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ"
    return True, u, None

# ==========================
# üß≠ Routing
# ==========================
if "route" not in st.session_state:
    st.session_state["route"] = "home"
route = st.session_state["route"]

# ==========================
# üè† Home
# ==========================
BANNER_URL = ""   # ‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ)

def page_home():
    if BANNER_URL:
        st.image(BANNER_URL, use_column_width=True)

    st.markdown("<div class='kys-h1'>‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•‡∏ß‡∏±‡∏î‡∏Ñ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà</div>", unsafe_allow_html=True)
    st.markdown("<div class='kys-sub'>‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏π‡πÅ‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏á‡πà‡∏≤‡∏¢ ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ</div>", unsafe_allow_html=True)

    c1, c2, c3, c4 = st.columns(4)

    with c1:
        st.markdown("""
        <div class="kys-box">
          <h3>üë©‚Äçüè´ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô</h3>
          <div class="kys-body">
            <ul>
              <li>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£/‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</li>
              <li>‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤/‡∏≠‡∏ö‡∏£‡∏°</li>
              <li>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</li>
            </ul>
          </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô", key="btn_teacher"):
            st.session_state["route"] = "login_teacher"; st.rerun()

    with c2:
        st.markdown("""
        <div class="kys-box">
          <h3>‚öôÔ∏è ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÇ‡∏°‡∏î‡∏π‡∏•</h3>
          <div class="kys-body">
            <ul>
              <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•</li>
              <li>‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•</li>
            </ul>
          </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÇ‡∏°‡∏î‡∏π‡∏•", key="btn_mod"):
            st.session_state["route"] = "login_module_admin"; st.rerun()

    with c3:
        st.markdown("""
        <div class="kys-box">
          <h3>üõ°Ô∏è ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà</h3>
          <div class="kys-body">
            <ul>
              <li>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</li>
              <li>‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£</li>
            </ul>
          </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà", key="btn_super"):
            st.session_state["route"] = "login_superadmin"; st.rerun()

    with c4:
        st.markdown("""
        <div class="kys-box">
          <h3>üè´ ‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ (Executive)</h3>
          <div class="kys-body">
            <ul>
              <li>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</li>
              <li>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</li>
            </ul>
          </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£", key="btn_exec"):
            st.session_state["route"] = "login_executive"; st.rerun()

    st.markdown(
        """
        <div class="kys-credit">
            ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ <b>‡∏Ñ‡∏£‡∏π‡∏™‡∏∏‡∏û‡∏à‡∏ô‡πå ‡∏ö‡πâ‡∏≤‡∏ô‡∏Å‡∏µ‡∏î‡∏Å‡∏£</b> ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•‡∏ß‡∏±‡∏î‡∏Ñ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ï‡∏£‡∏≤‡∏î<br>
            <small>School HR System v2 | Powered by Streamlit + Google Sheets</small>
        </div>
        """, unsafe_allow_html=True
    )

# ==========================
# üîë Login (generic)
# ==========================
def login_page(title: str, roles: list[str], next_route: str):
    st.markdown(f"<div class='kys-h1'>{title}</div>", unsafe_allow_html=True)
    with st.form("login_form"):
        uid = st.text_input("User ID / Teacher ID")
        pin = st.text_input("PIN", type="password")
        ok = st.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        if ok:
            passed, u, err = check_login(uid, pin, roles)
            if not passed:
                st.error(err)
            else:
                st.success(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì {u.get('name','')}")
                st.session_state["user"] = dict(u)
                st.session_state["route"] = next_route
                st.rerun()
    if st.button("‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"):
        st.session_state["route"] = "home"; st.rerun()

# ==========================
# üß© Portal Placeholder
# ==========================
def teacher_portal():
    st.success("‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô")
    st.info("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°/‡∏á‡∏≤‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π ‚Äî ‡πÄ‡∏ï‡∏¥‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ")
    st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", on_click=lambda: st.session_state.update({"route": "home"}))

def module_portal():
    st.success("‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÇ‡∏°‡∏î‡∏π‡∏•")
    st.info("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏Ç‡∏≠/‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏• ‚Äî ‡πÄ‡∏ï‡∏¥‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ")
    st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", on_click=lambda: st.session_state.update({"route": "home"}))

def superadmin_portal():
    st.success("‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà")
    st.info("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö ‚Äî ‡πÄ‡∏ï‡∏¥‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ")
    st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", on_click=lambda: st.session_state.update({"route": "home"}))

def executive_portal():
    st.success("‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ (Executive)")
    st.info("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ ‚Äî ‡πÄ‡∏ï‡∏¥‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ")
    st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", on_click=lambda: st.session_state.update({"route": "home"}))

# ==========================
# üö¶ Route Controller
# ==========================
def main():
    route = st.session_state.get("route", "home")

    if route == "home":
        page_home()
    elif route == "login_teacher":
        login_page("üë©‚Äçüè´ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô", ["teacher", "module_admin", "superadmin"], "teacher_portal")
    elif route == "login_module_admin":
        login_page("‚öôÔ∏è ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÇ‡∏°‡∏î‡∏π‡∏•", ["module_admin", "superadmin"], "module_portal")
    elif route == "login_superadmin":
        login_page("üõ°Ô∏è ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà", ["superadmin"], "superadmin_portal")
    elif route == "login_executive":
        login_page("üè´ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ (Executive)", ["executive", "superadmin"], "executive_portal")

    elif route == "teacher_portal":
        teacher_portal()
    elif route == "module_portal":
        module_portal()
    elif route == "superadmin_portal":
        superadmin_portal()
    elif route == "executive_portal":
        executive_portal()

if __name__ == "__main__":
    main()
