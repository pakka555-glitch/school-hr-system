
import os, io, datetime as dt
from typing import Dict, Any, List, Set
import streamlit as st
import pandas as pd
from PyPDF2 import PdfMerger
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import cm

APP_TITLE = "‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
DATA_DIR = "data"
os.makedirs(DATA_DIR, exist_ok=True)
TEACHER_CSV = "teachers.csv"
LOGO_PATH = "assets/school_logo.png"

# ---------- Modules dictionary ----------
MODULES = {
    "profile": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
    "gp7": "‡∏Å.‡∏û.7",
    "decorations": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ä",
    "awards": "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•",
    "promotion": "‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    "leave": "‡πÉ‡∏ö‡∏•‡∏≤",
    "offsite": "‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ô‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
    "pa": "‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á PA (Hybrid)",
    "training": "‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏≠‡∏ö‡∏£‡∏°",
    "training_report": "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°",
}

DEFAULT_SECTIONS = [
    "01_‡∏õ‡∏Å‡∏´‡∏ô‡πâ‡∏≤_‡∏´‡∏•‡∏±‡∏á",
    "02_‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
    "03_‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πâ‡∏ô_‡∏Ñ‡∏≥‡∏ô‡∏≥_‡∏™‡∏≤‡∏£‡∏ö‡∏±‡∏ç",
    "04_‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
    "05_‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà1_‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏á‡∏≤‡∏ô",
    "06_‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà2_‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢",
    "07_‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£_‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô",
]

# ---------- Data helpers ----------
@st.cache_data
def load_teachers():
    cols = ["teacher_id","name","email","department","pin","role","admin_modules"]
    if not os.path.exists(TEACHER_CSV):
        return pd.DataFrame(columns=cols)
    df = pd.read_csv(TEACHER_CSV, dtype=str).fillna("")
    for c in cols:
        if c not in df.columns:
            df[c] = ""
    return df[cols]

def get_teacher(tid: str):
    df = load_teachers()
    m = df[df["teacher_id"].astype(str).str.strip()==str(tid).strip()]
    return None if m.empty else m.iloc[0]

def ensure_dirs(tid: str):
    base = os.path.join(DATA_DIR, "uploads", tid)
    os.makedirs(base, exist_ok=True)
    for s in DEFAULT_SECTIONS:
        os.makedirs(os.path.join(base, s), exist_ok=True)

def save_upload(tid: str, section: str, file):
    ensure_dirs(tid)
    fname = f"{dt.datetime.now().strftime('%Y%m%d-%H%M%S')}_{file.name}"
    path = os.path.join(DATA_DIR, "uploads", tid, section, fname)
    with open(path, "wb") as f:
        f.write(file.getbuffer())
    return path

def list_files(tid: str):
    root = os.path.join(DATA_DIR, "uploads", tid)
    rows = []
    for s in DEFAULT_SECTIONS:
        p = os.path.join(root, s)
        if not os.path.exists(p): 
            continue
        for fn in sorted(os.listdir(p)):
            rows.append({"section": s, "filename": fn, "path": os.path.join(p, fn), "uploaded_at": fn[:15]})
    return pd.DataFrame(rows)

def gen_form_pdf_bytes(tid: str, name: str, form: Dict[str, Any]):
    buf = io.BytesIO()
    doc = SimpleDocTemplate(buf, pagesize=A4, leftMargin=2*cm, rightMargin=2*cm, topMargin=1.6*cm, bottomMargin=1.6*cm)
    styles = getSampleStyleSheet()
    story = []
    story.append(Paragraph("‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏á‡∏≤‡∏ô (PA) ‚Äî ‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°", styles["Heading1"]))
    story.append(Paragraph(f"‡∏Ñ‡∏£‡∏π: {name}  |  ‡∏£‡∏´‡∏±‡∏™: {tid}", styles["Normal"]))
    story.append(Spacer(1, 8))
    story.append(Paragraph("‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡πà‡∏≠", styles["Heading2"]))
    story.append(Paragraph(form.get("summary",""), styles["Normal"]))
    doc.build(story); buf.seek(0)
    return buf.read()

def merge_full_book(tid: str, sections: List[str], form_pdf: bytes|None):
    merger = PdfMerger()
    added = False
    if form_pdf: merger.append(io.BytesIO(form_pdf)); added=True
    df = list_files(tid)
    for sec in sections:
        dd = df[df["section"]==sec].sort_values("uploaded_at")
        for _, r in dd.iterrows():
            p = r["path"]
            if p.lower().endswith(".pdf"):
                try: merger.append(p); added=True
                except: pass
    if not added: return None
    out = io.BytesIO(); merger.write(out); merger.close(); out.seek(0)
    return out.read()

# ---------- UI base ----------
st.set_page_config(page_title=APP_TITLE, page_icon="üìò", layout="wide")
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Thai:wght@400;600;700&display=swap');
html, body, [class*="css"] { font-family: 'Noto Sans Thai', sans-serif; }
.stButton>button { border-radius: .7rem; padding: .6rem 1rem; font-weight: 600; }
.card {border-radius: 16px; padding: 16px; background:#fff; border:1px solid #e5e7eb; box-shadow:0 6px 14px rgba(2,6,23,.06);}
</style>
""", unsafe_allow_html=True)

# Prefill ?tid=
try: qp = st.query_params
except: qp = st.experimental_get_query_params()
prefill_tid = qp.get("tid",[None])[0] if isinstance(qp, dict) else None

# Session
if "role" not in st.session_state: st.session_state.role = None
if "teacher_id" not in st.session_state: st.session_state.teacher_id = None
if "admin_permissions" not in st.session_state: st.session_state.admin_permissions = set()

# Header
c0, c1 = st.columns([1,5])
with c0:
    if os.path.exists(LOGO_PATH): st.image(LOGO_PATH, width=72)
with c1:
    st.title(APP_TITLE)
    st.caption("Starter ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö ‚Äî ‡∏Ñ‡∏£‡∏π / ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏• / ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà")

with st.sidebar:
    page = st.radio("‡πÄ‡∏°‡∏ô‡∏π", ["‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å", "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"], index=0)

# -------- ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (‡πÉ‡∏´‡∏°‡πà) --------
def show_home():
    import streamlit as st
    from datetime import datetime
    import os

    # ---------- Logo + Title ----------
    col1, col2 = st.columns([1, 4])
    with col1:
        if os.path.exists("logo.png"):
            st.image("logo.png", width=160)
    with col2:
        st.markdown(
            """
            <h1 style='font-size:42px; font-weight:700; color:#0a2342; margin-bottom:0'>
                ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•‡∏ß‡∏±‡∏î‡∏Ñ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà
            </h1>
            <p style='color:#4f5b66; margin-top:4px; font-size:17px'>
                ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏π‡πÅ‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ
            </p>
            """,
            unsafe_allow_html=True
        )


# ---------------- Routing (‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤) ----------------
if page == "‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å":
    show_home()

elif page == "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ":
    st.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏Ñ‡∏£‡∏π)")
    # TODO: ‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏£‡∏π‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
    # tid = st.text_input("Teacher ID")
    # pin = st.text_input("PIN", type="password")
    # if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
    #     ...

elif page == "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•":
    st.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")
    # TODO: ‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• / module_admin / superadmin ‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

    st.markdown("---")

    
    # ---------- Theme CSS ----------
    st.markdown(
        """
        <style>
        body {
            background-color: #f5f8fb;
        }
        .role-card {
            background-color: #eef4fb;
            border: 1px solid #b5c7e3;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 3px 8px rgba(0,0,0,0.08);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .role-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 5px 12px rgba(0,0,0,0.12);
        }
        .role-title {
            font-size: 22px;
            color: #0a2342;
            font-weight: 700;
        }
        .role-sub {
            color: #333;
            font-size: 16px;
            margin-top: 10px;
        }
        .stButton>button {
            background-color: #1e3a8a;
            color: white !important;
            border-radius: 10px;
            padding: 10px 18px;
            font-weight: 600;
            border: none;
            transition: background-color 0.2s ease;
        }
        .stButton>button:hover {
            background-color: #1d4ed8;
        }
        .footer {
            text-align: right;
            color: #555;
            font-size: 14px;
            margin-top: 40px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    # ---------- Cards Section ----------
    colA, colB, colC = st.columns(3)

    with colA:
        st.markdown(
            """
            <div class="role-card">
                <div class="role-title">üë©‚Äçüè´ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô</div>
                <div class="role-sub">
                    - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£/‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•<br>
                    - ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤ / ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô / ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞<br>
                    - ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° (‡πÉ‡∏ö‡∏•‡∏≤, PA, ‡πÅ‡∏ü‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô)<br>
                    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ
                </div>
            </div>
            """,
            unsafe_allow_html=True
        )
        if st.button("‚û°Ô∏è ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏π"):
            st.session_state.menu = "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
            st.experimental_rerun()

    with colB:
        st.markdown(
            """
            <div class="role-card">
                <div class="role-title">üß© ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÇ‡∏°‡∏î‡∏π‡∏•</div>
                <div class="role-sub">
                    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö<br>
                    - ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á<br>
                    - ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•
                </div>
            </div>
            """,
            unsafe_allow_html=True
        )
        if st.button("‚û°Ô∏è ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÇ‡∏°‡∏î‡∏π‡∏•"):
            st.session_state.menu = "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"
            st.experimental_rerun()

    with colC:
        st.markdown(
            """
            <div class="role-card">
                <div class="role-title">üõ°Ô∏è ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà</div>
                <div class="role-sub">
                    - ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô<br>
                    - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£/‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö<br>
                    - ‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£
                </div>
            </div>
            """,
            unsafe_allow_html=True
        )
        if st.button("‚û°Ô∏è ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏ç‡πà"):
            st.session_state.menu = "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"
            st.experimental_rerun()

    # ---------- Footer ----------
    st.markdown(
        """
        <div class="footer">
            ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ <b>‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•‡∏ß‡∏±‡∏î‡∏Ñ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ï‡∏£‡∏≤‡∏î</b><br>
            <span style='font-size:13px'>‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢ ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ</span>
        </div>
        """,
        unsafe_allow_html=True
    )


if page == "‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å":
    show_home()

# ---------- ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏Ñ‡∏£‡∏π) ----------
elif page == "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ":
    st.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏Ñ‡∏£‡∏π)")
    tid = st.text_input("Teacher ID", value=prefill_tid or "")
    pin = st.text_input("PIN", type="password")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏π"):
        row = get_teacher(tid)
        if row is None or str(row["pin"]).strip()!=pin.strip():
            st.error("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠ PIN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        elif row["role"] not in ["teacher", "module_admin", "superadmin"]:
            st.error("‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        else:
            st.session_state.role = row["role"]
            st.session_state.teacher_id = tid.strip()
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô module_admin/superadmin ‡∏Å‡πá‡∏¢‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏π‡πÑ‡∏î‡πâ
            st.success(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {row['name']}")
            st.rerun()

    if st.session_state.teacher_id:
        row = get_teacher(st.session_state.teacher_id)
        name = row["name"]
        st.markdown(f"### ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏π ‚Äî {name} ({st.session_state.teacher_id})")

        # grid buttons
        colA, colB = st.columns(2)
        with colA:
            if st.button("üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", use_container_width=True): st.session_state.view = "profile"
            if st.button("üìú ‡∏Å.‡∏û.7", use_container_width=True): st.session_state.view = "gp7"
            if st.button("üèÖ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ä", use_container_width=True): st.session_state.view = "decorations"
            if st.button("üèÜ ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", use_container_width=True): st.session_state.view = "awards"
            if st.button("üí∞ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", use_container_width=True): st.session_state.view = "promotion"
        with colB:
            if st.button("üìù ‡πÉ‡∏ö‡∏•‡∏≤", use_container_width=True): st.session_state.view = "leave"
            if st.button("üö∂ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ô‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤", use_container_width=True): st.session_state.view = "offsite"
            if st.button("üìò ‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á PA (Hybrid)", use_container_width=True): st.session_state.view = "pa"
            if st.button("üß≥ ‡πÑ‡∏õ‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£/‡∏≠‡∏ö‡∏£‡∏°", use_container_width=True): st.session_state.view = "training"
            if st.button("üìÑ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°", use_container_width=True): st.session_state.view = "training_report"

        view = st.session_state.get("view","pa")
        st.divider()

        if view == "pa":
            st.subheader("PA ‚Äî Hybrid")
            form = st.session_state.get("pa_form", {})
            summary = st.text_area("‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡πà‡∏≠/‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á PA", value=form.get("summary",""), height=150)
            if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° PA"):
                st.session_state["pa_form"] = {"summary": summary}
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß")
            st.markdown("##### ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î (PDF)")
            section = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î", DEFAULT_SECTIONS)
            files = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", accept_multiple_files=True)
            if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå"):
                if files:
                    for f in files: save_upload(st.session_state.teacher_id, section, f)
                    st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å {len(files)} ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
            st.markdown("##### ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡πà‡∏°")
            include_form = st.checkbox("‡∏£‡∏ß‡∏° PDF ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å", value=True)
            if st.button("‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡πà‡∏° PDF"):
                form_pdf = None
                if include_form:
                    form_pdf = gen_form_pdf_bytes(st.session_state.teacher_id, name, st.session_state.get("pa_form",{}))
                book = merge_full_book(st.session_state.teacher_id, DEFAULT_SECTIONS, form_pdf)
                if book:
                    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏•‡πà‡∏° PDF", data=book, file_name=f"{st.session_state.teacher_id}_PA_book.pdf", mime="application/pdf")
                else:
                    st.error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°")
        else:
            st.info("‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á/‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡πÑ‡∏ß‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î")

# ---------- ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• ----------
elif page == "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•":
    st.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ô teachers.csv)")
    tid = st.text_input("Admin ID")
    pin = st.text_input("PIN", type="password")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"):
        row = get_teacher(tid)
        if row is None or str(row["pin"]).strip()!=pin.strip():
            st.error("Admin ID / PIN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        elif row["role"] not in ["module_admin","superadmin"]:
            st.error("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")
        else:
            st.session_state.role = row["role"]
            st.session_state.teacher_id = tid.strip()
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÇ‡∏°‡∏î‡∏π‡∏• (comma separated)
            mods = [m.strip() for m in row.get("admin_modules","").split(",") if m.strip()]
            st.session_state.admin_permissions = set(mods) if row["role"]=="module_admin" else set(MODULES.keys())
            st.success(f"‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Äî ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: {row['role']} | ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•: {', '.join(sorted(st.session_state.admin_permissions)) if st.session_state.admin_permissions else '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}")
            st.rerun()

    if st.session_state.role in ["module_admin","superadmin"]:
        df = load_teachers()
        st.markdown("### ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î")
        st.dataframe(df[["teacher_id","name","email","department","role","admin_modules"]], use_container_width=True)

        # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏π
        st.markdown("#### ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏π (?tid=)")
        base = st.text_input("‡∏ê‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå (‡πÄ‡∏ä‡πà‡∏ô https://your-app.streamlit.app)")
        if base:
            for _, r in df.iterrows():
                st.write(f"- {r['name']} ({r['teacher_id']}): {base}?tid={r['teacher_id']}")

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)
        st.markdown("#### ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡∏î‡∏π‡∏•")
        allowed: Set[str] = st.session_state.admin_permissions if st.session_state.role=="module_admin" else set(MODULES.keys())
        mods = [ (k,v) for k,v in MODULES.items() if k in allowed ]
        mod_key = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏•", mods, format_func=lambda x: x[1]) if mods else None

        if mod_key:
            key = mod_key[0]
            st.markdown(f"##### ‡πÇ‡∏°‡∏î‡∏π‡∏•: {MODULES[key]}")
            if key == "pa":
                # ‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏ü‡∏•‡πå PA ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏π
                rows = []
                for _, r in df.iterrows():
                    tid = r["teacher_id"]
                    files_df = list_files(tid)
                    rows.append({"teacher_id": tid, "name": r["name"], "‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": len(files_df)})
                st.dataframe(pd.DataFrame(rows), use_container_width=True)
            else:
                st.info("‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î (‡∏ü‡∏≠‡∏£‡πå‡∏°/‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)")
